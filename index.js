const { Telegraf } = require('telegraf');
const express = require('express');
const cors = require('cors');

const bot = new Telegraf(process.env.BOT_TOKEN); // –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
const app = express();

app.use(express.json());
app.use(cors());

const paymentProviderToken = '401643678:TEST:03413306-2d36-48a0-86d5-4adec20f7f93'; // –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π

const getInvoice = (id, totalPrice) => {
    return {
        chat_id: id,
        provider_token: paymentProviderToken,
        start_parameter: 'get_access',
        title: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', // –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
        description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', // –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
        currency: 'RUB',
        prices: [{ label: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', amount: totalPrice * 100 }], // –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        photo_url: 'https://example.com/product.jpg', // –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        photo_width: 500,
        photo_height: 500,
        payload: {
            unique_id: `${id}_${Date.now()}`,
            provider_token: paymentProviderToken
        }
    };
};

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (text === '/start') {
        await bot.sendMessage(chatId, '–ù–∏–∂–µ –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É', {
            reply_markup: {
                keyboard: [
                    [{ text: '–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É', web_app: { url: webAppUrl } }]
                ]
            }
        });

        await bot.sendMessage(chatId, '–ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –Ω–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', web_app: { url: webAppUrl } }]
                ]
            }
        });
    }

    if (msg?.web_app_data?.data) {
        try {
            const data = JSON.parse(msg?.web_app_data?.data);
            const user = msg.from;
            const userName = user?.first_name ? `${user.first_name} ${user.last_name || ''}`.trim() : user.username;

            let message = `–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! üéâ\n\n`;
            message += `üë§ *–í–∞—à–µ –∏–º—è:* ${userName}\n`;
            message += `üìç *–í–∞—à –≥–æ—Ä–æ–¥:* ${data?.city}\n`;
            message += `üè† *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* ${data?.sdekaddress}\n`;
            message += `üìû *–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* ${data?.phone}\n\n`;
            message += `üõçÔ∏è *–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:*\n`;

            data?.addedItems.forEach((item, index) => {
                message += `\n*–¢–æ–≤–∞—Ä ${index + 1}:*\n`;
                message += `üîπ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${item.title}\n`;
                message += `üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* ${item.description}\n`;
                message += `üìè *–†–∞–∑–º–µ—Ä:* ${item.selectedSize}\n`;
                message += `üí∞ *–¶–µ–Ω–∞:* ${item.price} ‚ÇΩ\n`;
            });

            await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

            setTimeout(async () => {
                await bot.sendMessage(chatId, '–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç');
            }, 3000);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', e);
        }
    }
});

app.post('/web-data', async (req, res) => {
    const { queryId, products = [], totalPrice } = req.body;
    try {
        await bot.answerWebAppQuery(queryId, {
            type: 'article',
            id: queryId,
            title: '–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞',
            input_message_content: {
                message_text: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π! –í—ã –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å—É–º–º—É ${totalPrice} —Ä—É–±–ª–µ–π: ${products.map(item => item.title).join(', ')}`
            }
        });
        return res.status(200).json({});
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å:', e);
        return res.status(500).json({});
    }
});

const PORT = process.env.PORT || 8000;
app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));

bot.launch();
